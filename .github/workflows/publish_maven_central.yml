on:
  workflow_call:
    inputs:
      module_path:
        required: true
        type: string
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Lint
        run: |
          module_path=$(echo "${{ inputs.module_path }}" | sed 's/\//:/g' | sed 's/^://')
          module_path=":${module_path}"  # Add a leading colon
          echo "Converted module path: $module_path"
          ./gradlew ${module_path}lint
  push:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Publish mavenCentral
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALUSERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALPASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYID }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
        run: |
          module_path=$(echo "${{ inputs.module_path }}" | sed 's/\//:/g' | sed 's/^://')
          module_path=":${module_path}"  # Add a leading colon
          echo "Converted module path: $module_path"
          ./gradlew ${module_path}publish
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: aar
          path: ./${{ inputs.module_path }}build/outputs/aar/
  pushTah:
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check the current version number
        id: generate_version
        run: |
          prev_version_1=$(grep "VERSION_NAME=" gradle.properties | sed -E 's/VERSION_NAME=([0-9]+)\.[0-9]+\.[0-9]+/\1/')
          prev_version_2=$(grep "VERSION_NAME=" gradle.properties | sed -E 's/VERSION_NAME=[0-9]+\.([0-9]+)\.[0-9]+/\1/')
          prev_version_3=$(grep "VERSION_NAME=" gradle.properties | sed -E 's/VERSION_NAME=[0-9]+\.[0-9]+\.([0-9]+)/\1/')
          new_version_1=$prev_version_1
          new_version_2=$prev_version_2
          new_version_3=$((prev_version_3 + 1))
          echo "current version number : $prev_version_1.$prev_version_2.$prev_version_3"
          if [ $new_version_3 -gt 999 ]; then
            new_version_2=$((new_version_2 + 1))
            new_version_3=$((new_version_3 % 1000))
            if [ $new_version_2 -gt 99 ]; then
              new_version_1=$((new_version_1 + 1))
              new_version_2=$((new_version_2 % 100))
            fi
          fi
          formatted_version=$(printf "%s" "$prev_version_1.$prev_version_2.$prev_version_3")
          echo "new_version=$formatted_version" >> $GITHUB_OUTPUT
          echo "Formatted Versions: $formatted_version"
      - name: Push tag
        run: |
          git config --global --add safe.directory /__w/DangoUnit/DangoUnit
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"
          module_path=$(echo "${{ inputs.module_path }}" | sed 's/\//_/g' | sed 's/_$//')
          new_tag="${module_path}_v${{ steps.generate_version.outputs.new_version }}"
          git tag $new_tag
          git pull --rebase origin master
          git push origin $new_tag